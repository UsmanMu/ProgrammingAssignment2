makeCacheMatrix <- function( m = matrix(c(2,5,6,10),nrow=2,ncol= 2) ) {
i <- NULL
set <- function( matrix ) {
m <<- matrix
i <<- NULL
}
## Method the get the matrix
get <- function() {
## Return the matrix
m
}
## Way to set the inverse of the matrix
setInverse <- function(inverse) {
i <<- inverse
}
## Way to get the inverse of the matrix
getInverse <- function() {
## Back the inverse property
i
}
## Back a list of the methods
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Compute the inverse of the unique matrix back by "makeCacheMatrix"
## Back to a matrix  “m”
m <- x$getInverse()
if( !is.null(m) ) {
message("getting cached data")
return(m)
}
## Compute the inverse via matrix multiplication
m <- solve(data) %*% data
## Set the inverse to the object
x$setInverse(m)
## Coming back the matrix
m
}
makeCacheMatrix <- function( m = matrix(c(2,5,6,10),nrow=2,ncol= 2))
amatrix = makeCacheMatrix(matrix(c(2,5,6,10),nrow=2,ncol=2))
amatrix = makeCacheMatrix(matrix(c(2,5,6,10),nrow=2,ncol=2))
source(“cachematrix.R”)
setwd("C:\Users\Usman\Documents\GitHub")
setwd("C:/Users/Usman/Documents/GitHub")
source(“cachematrix.R”)
setwd("C:/Users/Usman/Documents/GitHub/UsmanMu")
source(“https://github.com/rdpeng/ProgrammingAssignment2.git”)
source("path/to/file/ProgrammingAssignment2.R")
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2)
summary (a)
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2))
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2)))
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2))
makeCacheMatrix <- function( m = matrix() ) {
]
makeCacheMatrix <- function( m = matrix() ) {
i <- NULL
set <- function(y) {
m <<- y
i <<- NULL
}
get <- function() m
setInverse <- function(inverse)
i <<- inverse
getInverse <- function() i
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(m, ...) {
i <- m$getinverse()
if(!is.null(i)) {
message("getting cached inverse matrix")
return(i)
}
data <- m$get()
i <- solve(data, ...)
m$setinverse(m)
i
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
summary(a)
a$getMatrix()
a$getMatrix(a)
a$getMatrix()
a$getMatrix();
cacheSolve(a)
$setMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
a$setMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
makeCacheMatrix <- matrix(c(1,2,12,13), nrow = 2, ncol = 2)
i <- NULL
set <- function(y) {
m <<- y
i <<- NULL
}
get <- function() m
makeCacheMatrix <- function( m = matrix(c(1,2,12,13), nrow = 2, ncol = 2))
{
i <- NULL
set <- function(y) {
m <<- y
i <<- NULL
}
get <- function() m
setInverse <- function(inverse)
]
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2)
)
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2))
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2))
a <- matrix(c(1,2,12,13), nrow = 2, ncol = 2)
m = makeCacheMatrix(a)
x <- makeCacheMatrix (matrix(1:4, nrow=2, ncol=2))
x <- makeCacheMatrix(matrix(c(1:4, nrow=2, ncol=2)))
x <- matrix(c(1:4, nrow=2, ncol=2))
y = makeCacheMatrix(x)
x = rbind(c(1,-1/4),c(-1/4,1))
m = makeCacheMatrix(x)
source(“cachematrix.R”)
setwd("C:/users/Usman/Documents/GitHub/ProgrammingAssignment2")
source(“cachematrix.R”)
x = rbind(c(1,-1/4),c(-1/4,1))
m = makeCacheMatrix(x)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
x
cacheSolve(x)
a <- makeCacheMatrix(matrix(1:4,2))
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
source('~/.active-rstudio-document')
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
source('~/.active-rstudio-document')
x <- makeCacheMatrix(matrix(c(1:4, nrow = 2, ncol = 2)))
a$get()
x$get()
x <- makeCacheMatrix(matrix(c(1:4, nrow = 2, ncol = 2)))
x$get()
x <- makeCacheMatrix(matrix(c(1:4, nrow = 2, ncol = 2)))
x$get()
x <- makeCacheMatrix(matrix(c(1:4, nrow = 2, ncol = 2)))
a$get()
a <- makeCacheMatrix(matrix(c(1:4, nrow = 2, ncol = 2)))
a$get()
a = makeCacheMatrix(matrix(c(1:4, nrow = 2, ncol = 2)))
a$get()
x = makeCacheMatrix(matrix(c(1:4, nrow = 2, ncol = 2)))
x$get()
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
a = matrix(c(1:4, nrow = 2, ncol = 2))
x = makeCacheMatrix(a)
x$get()
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
a$get()
x <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
x$getInverse()
x$set(matrix(10:14, nrow = 2, ncol = 2))
x$set(matrix(11:14, nrow = 2, ncol = 2))
x$get()
cacheSolve(x)
source('~/.active-rstudio-document')
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
source('~/.active-rstudio-document')
cacheSolve(x)
x$get()
cacheSolve(x)
x$getInverse()
cacheSolve(x)
x <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
x$getInverse()
cacheSolve(x)
x$get()
cacheSolve(x)
a <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
a$get()
a$getInverse()
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
x <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
x$getInverse()
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached inverse matrix")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
cacheSolve (x)
cacheSolve (x)
source('~/.active-rstudio-document')
cacheSolve (x)
cacheSolve (x)
cacheSolve(x)
cacheSolve(x)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
x$getInverse()
cacheSolve(x)
x$getinverse()
x <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
x$getInverse()
cacheSolve(x)
x$getinverse()
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
m <- x$getInverse()
if ( ! is.null(m)) {
print("getting cached data")
return(m)
}
m <- solve(x$get())
x$setInverse(m)
m
}
cacheSolve(a)
cacheSolve(a)
m <- x$getInverse()
if ( ! is.null(m)) {
print("getting cached data")
return(m)
}
m <- solve(x$get())
x$setInverse(m)
m
}
cacheSolve(a)
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
m <- x$getInverse()
if ( ! is.null(m)) {
print("getting cached data")
return(m)
}
m <- solve(x$get())
x$setInverse(m)
m
}
cacheSolve(a)
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
help(cacheSolve)
x <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
cacheSolve(x)
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
a$getMatrix();
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
summary(a);
a$getMatrix()
a$get()
cacheSolve(a)
a$setMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
a$getMatrix();
cacheSolve(a)
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
x <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
data <- x$get()
i <- solve(data)
x$setinverse(i)
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
c=rbind(c(1, -1/4), c(-1/4, 1))
c
inv(c)
solve(c)
solve(c)*c
a$setMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )a$getMatrix()
a$setMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
a$setMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) );
a$getMatrix();
x <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
inv(c)
solve(c)
makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
inv(c)
solve(c)
cacheSolve(x)
x <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
x$get()
cacheSolve(x)
solve(x)
